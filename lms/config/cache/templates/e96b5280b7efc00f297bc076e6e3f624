#------------------------------------------------------------------------
# Compiled template generated by the Template Toolkit version 2.21
#------------------------------------------------------------------------

Template::Document->new({
    METADATA => {
        'name' => '/lms/Slim/Plugin/Podcast/HTML/EN/plugins/Podcast/settings/basic.html',
        'modtime' => '1607695397',
    },
    BLOCK => sub {
        my $context = shift || die "template sub called without context\n";
        my $stash   = $context->stash;
        my $output  = '';
        my $_tt_error;
        
        eval { BLOCK: {
#line 10 "/lms/Slim/Plugin/Podcast/HTML/EN/plugins/Podcast/settings/basic.html"
    
    # CAPTURE
    $stash->set('extJsScripts', do {
        my $output = '';
    $output .=  "\n	<script type=\"text/javascript\">\n		Ext.onReady(function(){ \n			new SqueezeJS.UI.Sortable({\n				el: 'podcasts_draggable',\n				selector: 'table#podcasts_draggable tr.podcast_draggable'\n			});\n		});\n	</script>\n";
        $output;
    });
    
    $output .=  "\n";
#line 11 "/lms/Slim/Plugin/Podcast/HTML/EN/plugins/Podcast/settings/basic.html"
    $output .=  $context->process('settings/header.html');
    $output .=  "\n\n	";
#line 15 "/lms/Slim/Plugin/Podcast/HTML/EN/plugins/Podcast/settings/basic.html"
    
    # WRAPPER
    $output .=  do {
        my $output = '';
    $output .=  "\n		 ";
#line 14 "/lms/Slim/Plugin/Podcast/HTML/EN/plugins/Podcast/settings/basic.html"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $_tt_filter = $context->filter('string')
                  || $context->throw($context->error);
    
    $output .=  'PODCAST_GROUP_DESC';
        
        &$_tt_filter($output);
    };
    
    $output .=  "\n	";
        $context->include('setting', { 'title' => 'PLUGIN_PODCAST', 'content', $output }); 
    };
    
    $output .=  "\n\n	<style>\n		.podcasts td { padding-top: 5px; }\n		.podcasts .firstColumn { padding-bottom: 15px; }\n	</style>\n\n	<div class=\"settingSection\">\n\n	<table border=\"0\" class=\"podcasts\" id=\"podcasts_draggable\">\n\n		<tr>\n			<td class=\"firstColumn prefHead\">\n				";
#line 28 "/lms/Slim/Plugin/Podcast/HTML/EN/plugins/Podcast/settings/basic.html"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $_tt_filter = $context->filter('string')
                  || $context->throw($context->error);
    
    $output .=  'SETUP_PLUGIN_PODCAST_ADD_FEED';
        
        &$_tt_filter($output);
    };
    
    $output .=  "\n			</td>\n			<td colspan=\"2\">\n				<input type=\"text\" class=\"stdedit\" name=\"newfeed\" value=\"";
#line 31 "/lms/Slim/Plugin/Podcast/HTML/EN/plugins/Podcast/settings/basic.html"
    $output .=  $stash->get('newfeedval');
    $output .=  "\" size=\"60\" />\n			</td>\n		</tr>\n\n		<tr>\n			<td class=\"prefHead\">\n				";
#line 37 "/lms/Slim/Plugin/Podcast/HTML/EN/plugins/Podcast/settings/basic.html"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $_tt_filter = $context->filter('string')
                  || $context->throw($context->error);
    
    $output .=  'SETUP_PLUGIN_PODCAST_EXISTING_FEEDS';
        
        &$_tt_filter($output);
    };
    
    $output .=  "\n			</td>\n			<td>\n				";
#line 40 "/lms/Slim/Plugin/Podcast/HTML/EN/plugins/Podcast/settings/basic.html"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $_tt_filter = $context->filter('string')
                  || $context->throw($context->error);
    
    $output .=  'DELETE';
        
        &$_tt_filter($output);
    };
    
    $output .=  "\n			</td>\n			<td>&nbsp;</td>\n		</tr>\n\n		";
#line 52 "/lms/Slim/Plugin/Podcast/HTML/EN/plugins/Podcast/settings/basic.html"
    
    # FOREACH 
    do {
        my ($_tt_value, $_tt_error, $_tt_oldloop);
        my $_tt_list = $stash->get(['prefs', 0, 'feeds', 0]);
        
        unless (UNIVERSAL::isa($_tt_list, 'Template::Iterator')) {
            $_tt_list = Template::Config->iterator($_tt_list)
                || die $Template::Config::ERROR, "\n"; 
        }
    
        ($_tt_value, $_tt_error) = $_tt_list->get_first();
        eval { $_tt_oldloop = $stash->get('loop') };
        $stash->set('loop', $_tt_list);
        eval {
    LOOP:   while (! $_tt_error) {
                $stash->{'pref'} = $_tt_value;
    $output .=  "\n		<tr class=\"podcast_draggable\">\n			<input name=\"feedorder\" type=\"hidden\" value=\"";
#line 47 "/lms/Slim/Plugin/Podcast/HTML/EN/plugins/Podcast/settings/basic.html"
    $output .=  $stash->get(['loop', 0, 'index', 0]);
    $output .=  "\">\n			<td>";
#line 48 "/lms/Slim/Plugin/Podcast/HTML/EN/plugins/Podcast/settings/basic.html"
    $output .=  $stash->get(['pref', 0, 1, 0]);
    $output .=  "</label></td>\n			<td><input name=\"delete\" type=\"checkbox\" value=\"";
#line 49 "/lms/Slim/Plugin/Podcast/HTML/EN/plugins/Podcast/settings/basic.html"
    $output .=  $stash->get(['pref', 0, 0, 0]);
    $output .=  "\"></td>\n			<td><div>";
#line 50 "/lms/Slim/Plugin/Podcast/HTML/EN/plugins/Podcast/settings/basic.html"
    $output .=  $stash->get(['pref', 0, 0, 0]);
    $output .=  "</div></td>\n		</tr>\n		";;
                ($_tt_value, $_tt_error) = $_tt_list->get_next();
            }
        };
        $stash->set('loop', $_tt_oldloop);
        die $@ if $@;
        $_tt_error = 0 if $_tt_error && $_tt_error eq Template::Constants::STATUS_DONE;
        die $_tt_error if $_tt_error;
    };
    
    $output .=  "\n\n	</table>\n\n	</div>\n	\n	";
#line 60 "/lms/Slim/Plugin/Podcast/HTML/EN/plugins/Podcast/settings/basic.html"
    
    # WRAPPER
    $output .=  do {
        my $output = '';
    $output .=  "\n		<input type=\"submit\" name=\"importFromMySB\" value=\"";
#line 59 "/lms/Slim/Plugin/Podcast/HTML/EN/plugins/Podcast/settings/basic.html"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $_tt_filter = $context->filter('string')
                  || $context->throw($context->error);
    
    $output .=  'PLUGIN_PODCAST_IMPORT_FROM_MYSB';
        
        &$_tt_filter($output);
    };
    
    $output .=  "\" />\n	";
        $context->include('setting', { 'title' => 'PLUGIN_PODCAST_IMPORT', 'desc' => '', 'content', $output }); 
    };
    
    $output .=  "\n\n	";
#line 64 "/lms/Slim/Plugin/Podcast/HTML/EN/plugins/Podcast/settings/basic.html"
    
    # WRAPPER
    $output .=  do {
        my $output = '';
    $output .=  "\n		<input type=\"text\" class=\"stdedit sliderInput_5_90_5\" name=\"pref_skipSecs\" id=\"skipSecs\" value=\"";
#line 63 "/lms/Slim/Plugin/Podcast/HTML/EN/plugins/Podcast/settings/basic.html"
    $output .=  $stash->get(['prefs', 0, 'pref_skipSecs', 0]);
    $output .=  "\" size=\"3\">\n	";
        $context->include('setting', { 'title' => 'PLUGIN_PODCAST_SKIP_BACK_SECS', 'desc' => 'PLUGIN_PODCAST_SKIP_BACK_DESC', 'content', $output }); 
    };
    
    $output .=  "\n	\n";
#line 66 "/lms/Slim/Plugin/Podcast/HTML/EN/plugins/Podcast/settings/basic.html"
    $output .=  $context->process('settings/footer.html');
    $output .=  "\n";
        } };
        if ($@) {
            $_tt_error = $context->catch($@, \$output);
            die $_tt_error unless $_tt_error->type eq 'return';
        }
    
        return $output;
    },
    DEFBLOCKS => {

    },
});
