#------------------------------------------------------------------------
# Compiled template generated by the Template Toolkit version 2.21
#------------------------------------------------------------------------

Template::Document->new({
    METADATA => {
        'modtime' => '1607695397',
        'name' => '/lms/HTML/EN/settings/player/synchronization.html',
    },
    BLOCK => sub {
        my $context = shift || die "template sub called without context\n";
        my $stash   = $context->stash;
        my $output  = '';
        my $_tt_error;
        
        eval { BLOCK: {
#line 1 "/lms/HTML/EN/settings/player/synchronization.html"
    $output .=  $context->process('settings/header.html');
    $output .=  "\n\n	";
#line 63 "/lms/HTML/EN/settings/player/synchronization.html"
    if ($stash->get(['prefs', 0, 'exists', [ 'synchronize' ]])) {
    $output .=  "\n		";
#line 62 "/lms/HTML/EN/settings/player/synchronization.html"
    
    # WRAPPER
    $output .=  do {
        my $output = '';
    $output .=  "\n			";
#line 11 "/lms/HTML/EN/settings/player/synchronization.html"
    
    # WRAPPER
    $output .=  do {
        my $output = '';
    $output .=  "\n				<select class=\"stdedit\" name=\"synchronize\" id=\"synchronize\">\n					";
#line 9 "/lms/HTML/EN/settings/player/synchronization.html"
    
    # FOREACH 
    do {
        my ($_tt_value, $_tt_error, $_tt_oldloop);
        my $_tt_list = $stash->get('syncGroups');
        
        unless (UNIVERSAL::isa($_tt_list, 'Template::Iterator')) {
            $_tt_list = Template::Config->iterator($_tt_list)
                || die $Template::Config::ERROR, "\n"; 
        }
    
        ($_tt_value, $_tt_error) = $_tt_list->get_first();
        eval { $_tt_oldloop = $stash->get('loop') };
        $stash->set('loop', $_tt_list);
        eval {
    LOOP:   while (! $_tt_error) {
                $stash->{'option'} = $_tt_value;
    $output .=  "\n						<option ";
#line 8 "/lms/HTML/EN/settings/player/synchronization.html"
    if ($stash->get(['prefs', 0, 'synchronize', 0]) eq $stash->get(['option', 0, 'key', 0])) {
    $output .=  "selected ";
    }
    
    $output .=  "value=\"";
#line 8 "/lms/HTML/EN/settings/player/synchronization.html"
    $output .=  $stash->get(['option', 0, 'key', 0]);
    $output .=  "\">";
#line 8 "/lms/HTML/EN/settings/player/synchronization.html"
    $output .=  $stash->get(['option', 0, 'value', 0]);
    $output .=  "</option>";;
                ($_tt_value, $_tt_error) = $_tt_list->get_next();
            }
        };
        $stash->set('loop', $_tt_oldloop);
        die $@ if $@;
        $_tt_error = 0 if $_tt_error && $_tt_error eq Template::Constants::STATUS_DONE;
        die $_tt_error if $_tt_error;
    };
    
    $output .=  "				</select>\n			";
        $context->include('settingGroup', { 'title' => 'SETUP_SYNCHRONIZE', 'desc' => 'SETUP_SYNCHRONIZE_DESC', 'content', $output }); 
    };
    
    $output .=  "\n\n			";
#line 22 "/lms/HTML/EN/settings/player/synchronization.html"
    
    # WRAPPER
    $output .=  do {
        my $output = '';
    $output .=  "\n				<select class=\"stdedit\" name=\"pref_syncVolume\" id=\"pref_syncVolume\">\n					";
#line 20 "/lms/HTML/EN/settings/player/synchronization.html"
    
    # FOREACH 
    do {
        my ($_tt_value, $_tt_error, $_tt_oldloop);
        my $_tt_list = { '1' => 'SETUP_SYNCVOLUME_ON', '0' => 'SETUP_SYNCVOLUME_OFF'  };
        
        unless (UNIVERSAL::isa($_tt_list, 'Template::Iterator')) {
            $_tt_list = Template::Config->iterator($_tt_list)
                || die $Template::Config::ERROR, "\n"; 
        }
    
        ($_tt_value, $_tt_error) = $_tt_list->get_first();
        eval { $_tt_oldloop = $stash->get('loop') };
        $stash->set('loop', $_tt_list);
        eval {
    LOOP:   while (! $_tt_error) {
                $stash->{'option'} = $_tt_value;
    $output .=  "\n						<option ";
#line 19 "/lms/HTML/EN/settings/player/synchronization.html"
    if ($stash->get(['prefs', 0, 'pref_syncVolume', 0]) eq $stash->get(['option', 0, 'key', 0])) {
    $output .=  "selected ";
    }
    
    $output .=  "value=\"";
#line 19 "/lms/HTML/EN/settings/player/synchronization.html"
    $output .=  $stash->get(['option', 0, 'key', 0]);
    $output .=  "\">";
#line 19 "/lms/HTML/EN/settings/player/synchronization.html"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $_tt_filter = $context->filter('string')
                  || $context->throw($context->error);
    
    $output .=  $stash->get(['option', 0, 'value', 0]);
        
        &$_tt_filter($output);
    };
    
    $output .=  "</option>";;
                ($_tt_value, $_tt_error) = $_tt_list->get_next();
            }
        };
        $stash->set('loop', $_tt_oldloop);
        die $@ if $@;
        $_tt_error = 0 if $_tt_error && $_tt_error eq Template::Constants::STATUS_DONE;
        die $_tt_error if $_tt_error;
    };
    
    $output .=  "				</select>\n			";
        $context->include('settingGroup', { 'title' => 'SETUP_SYNCVOLUME', 'desc' => 'SETUP_SYNCVOLUME_DESC', 'content', $output }); 
    };
    
    $output .=  "\n\n			";
#line 33 "/lms/HTML/EN/settings/player/synchronization.html"
    
    # WRAPPER
    $output .=  do {
        my $output = '';
    $output .=  "\n				<select class=\"stdedit\" name=\"pref_syncPower\" id=\"pref_syncPower\">\n					";
#line 31 "/lms/HTML/EN/settings/player/synchronization.html"
    
    # FOREACH 
    do {
        my ($_tt_value, $_tt_error, $_tt_oldloop);
        my $_tt_list = { '1' => 'SETUP_SYNCPOWER_ON', '0' => 'SETUP_SYNCPOWER_OFF'  };
        
        unless (UNIVERSAL::isa($_tt_list, 'Template::Iterator')) {
            $_tt_list = Template::Config->iterator($_tt_list)
                || die $Template::Config::ERROR, "\n"; 
        }
    
        ($_tt_value, $_tt_error) = $_tt_list->get_first();
        eval { $_tt_oldloop = $stash->get('loop') };
        $stash->set('loop', $_tt_list);
        eval {
    LOOP:   while (! $_tt_error) {
                $stash->{'option'} = $_tt_value;
    $output .=  "\n						<option ";
#line 30 "/lms/HTML/EN/settings/player/synchronization.html"
    if ($stash->get(['prefs', 0, 'pref_syncPower', 0]) eq $stash->get(['option', 0, 'key', 0])) {
    $output .=  "selected ";
    }
    
    $output .=  "value=\"";
#line 30 "/lms/HTML/EN/settings/player/synchronization.html"
    $output .=  $stash->get(['option', 0, 'key', 0]);
    $output .=  "\">";
#line 30 "/lms/HTML/EN/settings/player/synchronization.html"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $_tt_filter = $context->filter('string')
                  || $context->throw($context->error);
    
    $output .=  $stash->get(['option', 0, 'value', 0]);
        
        &$_tt_filter($output);
    };
    
    $output .=  "</option>";;
                ($_tt_value, $_tt_error) = $_tt_list->get_next();
            }
        };
        $stash->set('loop', $_tt_oldloop);
        die $@ if $@;
        $_tt_error = 0 if $_tt_error && $_tt_error eq Template::Constants::STATUS_DONE;
        die $_tt_error if $_tt_error;
    };
    
    $output .=  "				</select>\n			";
        $context->include('settingGroup', { 'title' => 'SETUP_SYNCPOWER', 'desc' => 'SETUP_SYNCPOWER_DESC', 'content', $output }); 
    };
    
    $output .=  "\n\n			";
#line 44 "/lms/HTML/EN/settings/player/synchronization.html"
    
    # WRAPPER
    $output .=  do {
        my $output = '';
    $output .=  "\n				<select class=\"stdedit\" name=\"pref_maintainSync\" id=\"pref_maintainSync\">\n					";
#line 42 "/lms/HTML/EN/settings/player/synchronization.html"
    
    # FOREACH 
    do {
        my ($_tt_value, $_tt_error, $_tt_oldloop);
        my $_tt_list = { '1' => 'SETUP_MAINTAINSYNC_ON', '0' => 'SETUP_MAINTAINSYNC_OFF'  };
        
        unless (UNIVERSAL::isa($_tt_list, 'Template::Iterator')) {
            $_tt_list = Template::Config->iterator($_tt_list)
                || die $Template::Config::ERROR, "\n"; 
        }
    
        ($_tt_value, $_tt_error) = $_tt_list->get_first();
        eval { $_tt_oldloop = $stash->get('loop') };
        $stash->set('loop', $_tt_list);
        eval {
    LOOP:   while (! $_tt_error) {
                $stash->{'option'} = $_tt_value;
    $output .=  "\n						<option ";
#line 41 "/lms/HTML/EN/settings/player/synchronization.html"
    if ($stash->get(['prefs', 0, 'pref_maintainSync', 0]) eq $stash->get(['option', 0, 'key', 0])) {
    $output .=  "selected ";
    }
    
    $output .=  "value=\"";
#line 41 "/lms/HTML/EN/settings/player/synchronization.html"
    $output .=  $stash->get(['option', 0, 'key', 0]);
    $output .=  "\">";
#line 41 "/lms/HTML/EN/settings/player/synchronization.html"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $_tt_filter = $context->filter('string')
                  || $context->throw($context->error);
    
    $output .=  $stash->get(['option', 0, 'value', 0]);
        
        &$_tt_filter($output);
    };
    
    $output .=  "</option>";;
                ($_tt_value, $_tt_error) = $_tt_list->get_next();
            }
        };
        $stash->set('loop', $_tt_oldloop);
        die $@ if $@;
        $_tt_error = 0 if $_tt_error && $_tt_error eq Template::Constants::STATUS_DONE;
        die $_tt_error if $_tt_error;
    };
    
    $output .=  "				</select>\n			";
        $context->include('settingGroup', { 'title' => 'SETUP_MAINTAINSYNC', 'desc' => 'SETUP_MAINTAINSYNC_DESC', 'content', $output }); 
    };
    
    $output .=  "\n\n			";
#line 48 "/lms/HTML/EN/settings/player/synchronization.html"
    
    # WRAPPER
    $output .=  do {
        my $output = '';
    $output .=  "\n				<input type=text class=\"stdedit sliderInput_0_3000\" name=\"pref_startDelay\" id=\"pref_startDelay\" value=\"";
#line 47 "/lms/HTML/EN/settings/player/synchronization.html"
    $output .=  $stash->get(['prefs', 0, 'pref_startDelay', 0]);
    $output .=  "\" size=\"5\">\n			";
        $context->include('settingGroup', { 'title' => 'SETUP_STARTDELAY', 'desc' => 'SETUP_STARTDELAY_DESC', 'content', $output }); 
    };
    
    $output .=  "\n\n			";
#line 52 "/lms/HTML/EN/settings/player/synchronization.html"
    
    # WRAPPER
    $output .=  do {
        my $output = '';
    $output .=  "\n				<input type=text class=\"stdedit sliderInput_0_3000\" name=\"pref_playDelay\" id=\"pref_playDelay\" value=\"";
#line 51 "/lms/HTML/EN/settings/player/synchronization.html"
    $output .=  $stash->get(['prefs', 0, 'pref_playDelay', 0]);
    $output .=  "\" size=\"5\">\n			";
        $context->include('settingGroup', { 'title' => 'SETUP_PLAYDELAY', 'desc' => 'SETUP_PLAYDELAY_DESC', 'content', $output }); 
    };
    
    $output .=  "\n\n			";
#line 56 "/lms/HTML/EN/settings/player/synchronization.html"
    
    # WRAPPER
    $output .=  do {
        my $output = '';
    $output .=  "\n				<input type=text class=\"stdedit sliderInput_10_1000\" name=\"pref_minSyncAdjust\" id=\"pref_minSyncAdjust\" value=\"";
#line 55 "/lms/HTML/EN/settings/player/synchronization.html"
    $output .=  $stash->get(['prefs', 0, 'pref_minSyncAdjust', 0]);
    $output .=  "\" size=\"5\">\n			";
        $context->include('settingGroup', { 'title' => 'SETUP_MINSYNCADJUST', 'desc' => 'SETUP_MINSYNCADJUST_DESC', 'content', $output }); 
    };
    
    $output .=  "\n	\n			";
#line 60 "/lms/HTML/EN/settings/player/synchronization.html"
    
    # WRAPPER
    $output .=  do {
        my $output = '';
    $output .=  "\n				<input type=text class=\"stdedit sliderInput_0_1000\" name=\"pref_packetLatency\" id=\"pref_packetLatency\" value=\"";
#line 59 "/lms/HTML/EN/settings/player/synchronization.html"
    $output .=  $stash->get(['prefs', 0, 'pref_packetLatency', 0]);
    $output .=  "\" size=\"5\">\n			";
        $context->include('settingGroup', { 'title' => 'SETUP_PACKETLATENCY', 'desc' => 'SETUP_PACKETLATENCY_DESC', 'content', $output }); 
    };
    
    $output .=  "\n\n		";
        $context->include('settingSection', { 'content', $output }); 
    };
    
    $output .=  "\n	";
    }
    
    $output .=  "\n\n";
#line 65 "/lms/HTML/EN/settings/player/synchronization.html"
    $output .=  $context->process('settings/footer.html');
    $output .=  "\n";
        } };
        if ($@) {
            $_tt_error = $context->catch($@, \$output);
            die $_tt_error unless $_tt_error->type eq 'return';
        }
    
        return $output;
    },
    DEFBLOCKS => {

    },
});
