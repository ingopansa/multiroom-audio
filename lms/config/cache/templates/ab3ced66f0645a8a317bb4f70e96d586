#------------------------------------------------------------------------
# Compiled template generated by the Template Toolkit version 2.21
#------------------------------------------------------------------------

Template::Document->new({
    METADATA => {
        'name' => 'browsedbitems_list.html',
        'modtime' => '1607695397',
    },
    BLOCK => sub {
        my $context = shift || die "template sub called without context\n";
        my $stash   = $context->stash;
        my $output  = '';
        my $_tt_error;
        
        eval { BLOCK: {
    $output .=  "	";
#line 1 "/lms/HTML/EN/browsedbitems_list.html"
    if (!($stash->get('leftControls'))) {
#line 1 "/lms/HTML/EN/browsedbitems_list.html"
    $stash->set('leftControls', 'browsecontrols');
    }
    
    $output .=  "\n	";
#line 15 "/lms/HTML/EN/browsedbitems_list.html"
    
    # WRAPPER
    $output .=  do {
        my $output = '';
    $output .=  "\n	";
#line 14 "/lms/HTML/EN/browsedbitems_list.html"
    if (!($stash->get('itemInfoTemplate'))) {
#line 14 "/lms/HTML/EN/browsedbitems_list.html"
    $stash->set('itemInfoTemplate', 'iteminfo');
    }
    
#line 14 "/lms/HTML/EN/browsedbitems_list.html"
    $output .=  $context->process($stash->get('itemInfoTemplate'));
    $output .=  "\n	";
        $context->include('contentitem', { 'leftcontrols' => $stash->get('leftControls'), 'itemobj' => $stash->get(['item', 0, 'itemobj', 0]), 'attributes' => $stash->get(['item', 0, 'attributes', 0]), 'odd' => $stash->get(['item', 0, 'odd', 0]), 'anchor' => $stash->get(['item', 0, 'anchor', 0]), 'showdescend' => $stash->get(['item', 0, 'showdescend', 0]), 'showplay' => $stash->get(['item', 0, 'showplay', 0]), 'showplayall' => $stash->get(['item', 0, 'showplayall', 0]), 'playallhref' => $stash->get(['item', 0, 'playallhref', 0]), 'addallhref' => $stash->get(['item', 0, 'addallhref', 0]), 'href' => $stash->get(['item', 0, 'href', 0]), 'content', $output }); 
    };
    
        } };
        if ($@) {
            $_tt_error = $context->catch($@, \$output);
            die $_tt_error unless $_tt_error->type eq 'return';
        }
    
        return $output;
    },
    DEFBLOCKS => {

    },
});
